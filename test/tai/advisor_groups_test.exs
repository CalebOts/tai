defmodule Tai.AdvisorGroupsTest do
  use ExUnit.Case, async: true

  defmodule TestFactory do
    def advisor_specs(group) do
      [
        {
          group.advisor,
          [
            group_id: group.id,
            advisor_id: :my_advisor,
            order_books: %{},
            config: %{}
          ]
        }
      ]
    end
  end

  @product struct(Tai.Venues.Product, %{venue_id: :exchange_a, symbol: :btc_usd})
  @group struct(Tai.AdvisorGroup, %{
           id: :group_a,
           start_on_boot: false,
           advisor: TestAdvisor,
           factory: TestFactory,
           products: [@product]
         })

  describe ".specs" do
    test "returns a list of advisor specs generated by the factory" do
      assert [advisor | []] = Tai.AdvisorGroups.specs(@group)
      assert {TestAdvisor, _} = advisor
    end

    test "can filter by start_on_boot" do
      assert [advisor | []] = Tai.AdvisorGroups.specs(@group, start_on_boot: false)
      assert {TestAdvisor, _} = advisor

      assert Tai.AdvisorGroups.specs(@group, start_on_boot: true) == []
    end

    test "can filter by group_id" do
      assert [advisor | []] = Tai.AdvisorGroups.specs(@group, group_id: :group_a)
      assert {TestAdvisor, _} = advisor

      assert Tai.AdvisorGroups.specs(@group, group_id: :group_b) == []
    end

    test "can filter in combination" do
      assert [advisor | []] =
               Tai.AdvisorGroups.specs(@group, start_on_boot: false, group_id: :group_a)

      assert {TestAdvisor, _} = advisor

      assert Tai.AdvisorGroups.specs(@group, start_on_boot: true) == []
      assert Tai.AdvisorGroups.specs(@group, group_id: :group_b) == []
    end
  end
end
